// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id          Int      @default(autoincrement())
  name        String
  description String
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([id])
  @@map("user_role")
}

model User {
  id                 String       @id @default(uuid())
  name               String
  email              String       @unique
  emailVerified      DateTime
  passwordHash       String
  profile            Profile?
  roleId             Int
  role               UserRole     @relation(fields: [roleId], references: [id])
  verifiedBusinesses Business[]
  reviews            RepReviews[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Profile {
  id        String   @id @default(uuid())
  bio       String
  avatar    String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Country {
  id              String                 @id @unique
  name            String
  representatives Representative[]
  areas           AreaOfRepresentation[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now())

  @@index([name])
}

model AreaOfRepresentation {
  id              String                 @id @unique @default(uuid())
  name            String
  parentAreaId    String?
  parentArea      AreaOfRepresentation?  @relation("ChildAreas", fields: [parentAreaId], references: [id])
  childrenAreas   AreaOfRepresentation[] @relation("ChildAreas")
  representatives Representative[]
  countryId       String
  country         Country                @relation(fields: [countryId], references: [id])
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now())

  @@index([name, countryId])
}

model Party {
  id              String           @id @unique
  name            String
  abbreviation    String
  representatives Representative[]
  image           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model RepTenure {
  id               String         @id @default(uuid())
  representativeId String
  representative   Representative @relation(fields: [representativeId], references: [id])
  reviews          RepReviews[]
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model RepReviews {
  id          String    @id @default(uuid())
  repTenureId String
  repTenure   RepTenure @relation(fields: [repTenureId], references: [id])
  reviewerId  String
  reviewer    User      @relation(fields: [reviewerId], references: [id])
}

model Representative {
  id          String               @id @unique @default(uuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  areaOfRepId String
  party       Party                @relation(fields: [partyId], references: [id])
  areaOfRep   AreaOfRepresentation @relation(fields: [areaOfRepId], references: [id])
  country     Country              @relation(fields: [countryId], references: [id])
  votes       Vote[]
  countryId   String
  countyId    String
  partyId     String
  roleId      Int
  role        RepresentativeRole   @relation(fields: [roleId], references: [id])
  bills       Bill[]
  image       String
  business    Business[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  RepTenure   RepTenure[]
}

model RepresentativeRole {
  id              Int              @default(autoincrement())
  name            String
  description     String
  representatives Representative[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@id([id])
  @@map("representative_role")
}

model Bill {
  id               String           @id @unique
  name             String
  description      String
  dateCreated      DateTime
  dateInParliament DateTime
  dateInSenate     DateTime
  broughtBy        Representative[]
  votes            Vote[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
}

model Vote {
  id               String         @id @default(uuid())
  billId           String
  bill             Bill           @relation(fields: [billId], references: [id])
  representativeId String
  representative   Representative @relation(fields: [representativeId], references: [id])
  vote             Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
}

model BusinessSector {
  id          String     @id @default(uuid())
  name        String
  description String
  businesses  Business[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model BusinessStatus {
  id         String     @id @default(uuid())
  name       String
  businesses Business[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
}

model Business {
  id             String           @id @default(uuid())
  name           String
  description    String
  ownedBy        Representative[]
  sector         BusinessSector[]
  website        String
  twitter        String
  facebook       String
  instagram      String
  verifiedBy     String
  verifiedByUser User             @relation(fields: [verifiedBy], references: [id])
  statusId       String
  status         BusinessStatus   @relation(fields: [statusId], references: [id])
  foundedIn      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([name, description, website, twitter, facebook, instagram, createdAt, updatedAt])
  @@map("business")
}
